{"version":3,"sources":["shape.ts","circle.ts","main.ts"],"names":[],"mappings":"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","file":"main.775743e7.js","sourceRoot":"../src","sourcesContent":["export class Shape {\n  public x: number;\n  public y: number;\n  public vx: number;\n  public vy: number;\n  public width: number;\n  public height: number;\n  public lineWidth: number;\n  public color: string;\n  public life: number;\n\n  constructor(x: number = 0, y: number = 0, color: string = 'red', line_width: number = 2, life: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.vx = 0;\n    this.vy = 0;\n    this.width = 0;\n    this.height = 0;\n    this.life = life;\n    this.color = color;\n    this.lineWidth = line_width;\n  }\n\n  public move = (): void => {\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n}\n","import { Shape } from './shape';\n\nexport class Circle extends Shape {\n  public radius: number = 10;\n\n  constructor(x: number = 0, y: number = 0, radius: number = 10, color: string = 'red', line_width: number = 10, life:number = 1) {\n    super(x, y, color, line_width, life)\n    this.x = x;\n    this.y = y;\n    this.vx = 0;\n    this.vy = 0;\n    this.radius = radius; \n    this.width = this.height = radius;\n    this.color = color;\n    this.lineWidth = line_width;\n  }\n\n  public draw = (ctx: CanvasRenderingContext2D): void => {\n    if (ctx != null) {\n      ctx.save();\n      ctx.globalAlpha = 1 * this.life/100;\n      ctx.beginPath();\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = this.lineWidth;\n      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      ctx.stroke();\n      ctx.restore();\n      ctx.globalAlpha = 1;\n    }\n  }\n}\n","import { Circle } from './circle';\nimport './style.css';\n\nvar canvas: HTMLCanvasElement;\nvar ctx: CanvasRenderingContext2D;\nlet width = window.innerWidth;\nlet height = window.innerHeight;\nlet deadCircles: Array < Circle > = [];\nvar circles: Array < Circle > = [];\nlet maxCircles = 25;\nlet spawnX = width/2;\nlet spawnY = height/2;\n\nfunction gameLoop() {\n  requestAnimationFrame(gameLoop);\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, width, height);\n\n  if (circles.length < maxCircles) {\n    spawnCircle(spawnX, spawnY);\n  }\n  \n  circles.forEach((c, i) => {\n    c.move();\n    if (c.x <= -c.width || c.x >= width + c.width) {\n      c.vx *= -1;\n    }\n    if (c.y <= -c.height || c.y > height + c.height) {\n      c.vy *= -1;\n    }\n    c.life -= 1;\n    if (c.life <= 0) {\n      recycle(c);\n      circles.splice(i,1);\n    }\n    c.draw(ctx);\n  });\n\n  ctx.font = '24px serif';\n  ctx.textBaseline = 'hanging';\n  ctx.fillStyle = getRandomColor();\n  ctx.fillText('Hello World!', 0, 0);\n  ctx.textBaseline = 'alphabetic';\n  ctx.fillText(`${width} x ${height}`, 0, height);\n}\n\nfunction recycle(c: Circle) {\n  deadCircles.push(c);\n}\n\nfunction getCircle(): Circle {\n  if (deadCircles.length > 0) {\n    return deadCircles.pop() as Circle;\n  } else {\n    return new Circle();\n  }\n}\n\nfunction spawnCircle(x: number, y:number): void {\n  let c: Circle = getCircle();\n  let maxVelocity = 15;\n  let maxRadius = 100;\n  c.x = x;\n  c.y = y;\n  c.radius = Math.random() * maxRadius;\n  c.color = getRandomColor();\n  c.vx = Math.random() * maxVelocity - Math.random() * maxVelocity;\n  c.vy = Math.random() * maxVelocity - Math.random() * maxVelocity;\n  c.life = 100;\n  circles.push(c);\n}\n\nfunction getRandomColor() {\n  const r = Math.random() * 2 < 1 ? '2' : 'd';\n  const g = Math.random() * 2 < 1 ? '2' : 'd';\n  const b = Math.random() * 2 < 1 ? '2' : 'd';\n  return `#${r}${g}${b}`;\n}\n\n\nwindow.onload = () => {\n  let container = document.createElement('div');\n  container.id = 'container';\n\n  canvas = document.createElement('canvas');\n  canvas.id = 'game';\n  canvas.width = width;\n  canvas.height = height;\n  canvas.classList.add('red_border');\n  container.appendChild(canvas);\n  document.body.appendChild(container);\n  ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n  gameLoop();\n\n  canvas.onclick = (e) => {\n    spawnCircle(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop );\n  }\n\n  canvas.onmousemove = (e) => {\n    spawnX = e.clientX - canvas.offsetLeft;\n    spawnY = e.clientY - canvas.offsetTop;\n  }\n}\n"]}